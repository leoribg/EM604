// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/26/2017 00:17:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    project2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module project2_vlg_sample_tst(
	addressA,
	addressB,
	clk,
	rst,
	sampler_tx
);
input [8:0] addressA;
input [8:0] addressB;
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(addressA or addressB or clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module project2_vlg_check_tst (
	finished,
	quotientFlag,
	remainderFlag,
	sampler_rx
);
input  finished;
input [7:0] quotientFlag;
input [8:0] remainderFlag;
input sampler_rx;

reg  finished_expected;
reg [7:0] quotientFlag_expected;
reg [8:0] remainderFlag_expected;

reg  finished_prev;
reg [7:0] quotientFlag_prev;
reg [8:0] remainderFlag_prev;

reg  finished_expected_prev;
reg [7:0] quotientFlag_expected_prev;
reg [8:0] remainderFlag_expected_prev;

reg  last_finished_exp;
reg [7:0] last_quotientFlag_exp;
reg [8:0] last_remainderFlag_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	finished_prev = finished;
	quotientFlag_prev = quotientFlag;
	remainderFlag_prev = remainderFlag;
end

// update expected /o prevs

always @(trigger)
begin
	finished_expected_prev = finished_expected;
	quotientFlag_expected_prev = quotientFlag_expected;
	remainderFlag_expected_prev = remainderFlag_expected;
end



// expected finished
initial
begin
	finished_expected = 1'bX;
end 
// expected quotientFlag[ 7 ]
initial
begin
	quotientFlag_expected[7] = 1'bX;
end 
// expected quotientFlag[ 6 ]
initial
begin
	quotientFlag_expected[6] = 1'bX;
end 
// expected quotientFlag[ 5 ]
initial
begin
	quotientFlag_expected[5] = 1'bX;
end 
// expected quotientFlag[ 4 ]
initial
begin
	quotientFlag_expected[4] = 1'bX;
end 
// expected quotientFlag[ 3 ]
initial
begin
	quotientFlag_expected[3] = 1'bX;
end 
// expected quotientFlag[ 2 ]
initial
begin
	quotientFlag_expected[2] = 1'bX;
end 
// expected quotientFlag[ 1 ]
initial
begin
	quotientFlag_expected[1] = 1'bX;
end 
// expected quotientFlag[ 0 ]
initial
begin
	quotientFlag_expected[0] = 1'bX;
end 
// expected remainderFlag[ 8 ]
initial
begin
	remainderFlag_expected[8] = 1'bX;
end 
// expected remainderFlag[ 7 ]
initial
begin
	remainderFlag_expected[7] = 1'bX;
end 
// expected remainderFlag[ 6 ]
initial
begin
	remainderFlag_expected[6] = 1'bX;
end 
// expected remainderFlag[ 5 ]
initial
begin
	remainderFlag_expected[5] = 1'bX;
end 
// expected remainderFlag[ 4 ]
initial
begin
	remainderFlag_expected[4] = 1'bX;
end 
// expected remainderFlag[ 3 ]
initial
begin
	remainderFlag_expected[3] = 1'bX;
end 
// expected remainderFlag[ 2 ]
initial
begin
	remainderFlag_expected[2] = 1'bX;
end 
// expected remainderFlag[ 1 ]
initial
begin
	remainderFlag_expected[1] = 1'bX;
end 
// expected remainderFlag[ 0 ]
initial
begin
	remainderFlag_expected[0] = 1'bX;
end 
// generate trigger
always @(finished_expected or finished or quotientFlag_expected or quotientFlag or remainderFlag_expected or remainderFlag)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected finished = %b | expected quotientFlag = %b | expected remainderFlag = %b | ",finished_expected_prev,quotientFlag_expected_prev,remainderFlag_expected_prev);
	$display("| real finished = %b | real quotientFlag = %b | real remainderFlag = %b | ",finished_prev,quotientFlag_prev,remainderFlag_prev);
`endif
	if (
		( finished_expected_prev !== 1'bx ) && ( finished_prev !== finished_expected_prev )
		&& ((finished_expected_prev !== last_finished_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finished :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finished_expected_prev);
		$display ("     Real value = %b", finished_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finished_exp = finished_expected_prev;
	end
	if (
		( quotientFlag_expected_prev[0] !== 1'bx ) && ( quotientFlag_prev[0] !== quotientFlag_expected_prev[0] )
		&& ((quotientFlag_expected_prev[0] !== last_quotientFlag_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotientFlag[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotientFlag_expected_prev);
		$display ("     Real value = %b", quotientFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_quotientFlag_exp[0] = quotientFlag_expected_prev[0];
	end
	if (
		( quotientFlag_expected_prev[1] !== 1'bx ) && ( quotientFlag_prev[1] !== quotientFlag_expected_prev[1] )
		&& ((quotientFlag_expected_prev[1] !== last_quotientFlag_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotientFlag[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotientFlag_expected_prev);
		$display ("     Real value = %b", quotientFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_quotientFlag_exp[1] = quotientFlag_expected_prev[1];
	end
	if (
		( quotientFlag_expected_prev[2] !== 1'bx ) && ( quotientFlag_prev[2] !== quotientFlag_expected_prev[2] )
		&& ((quotientFlag_expected_prev[2] !== last_quotientFlag_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotientFlag[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotientFlag_expected_prev);
		$display ("     Real value = %b", quotientFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_quotientFlag_exp[2] = quotientFlag_expected_prev[2];
	end
	if (
		( quotientFlag_expected_prev[3] !== 1'bx ) && ( quotientFlag_prev[3] !== quotientFlag_expected_prev[3] )
		&& ((quotientFlag_expected_prev[3] !== last_quotientFlag_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotientFlag[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotientFlag_expected_prev);
		$display ("     Real value = %b", quotientFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_quotientFlag_exp[3] = quotientFlag_expected_prev[3];
	end
	if (
		( quotientFlag_expected_prev[4] !== 1'bx ) && ( quotientFlag_prev[4] !== quotientFlag_expected_prev[4] )
		&& ((quotientFlag_expected_prev[4] !== last_quotientFlag_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotientFlag[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotientFlag_expected_prev);
		$display ("     Real value = %b", quotientFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_quotientFlag_exp[4] = quotientFlag_expected_prev[4];
	end
	if (
		( quotientFlag_expected_prev[5] !== 1'bx ) && ( quotientFlag_prev[5] !== quotientFlag_expected_prev[5] )
		&& ((quotientFlag_expected_prev[5] !== last_quotientFlag_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotientFlag[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotientFlag_expected_prev);
		$display ("     Real value = %b", quotientFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_quotientFlag_exp[5] = quotientFlag_expected_prev[5];
	end
	if (
		( quotientFlag_expected_prev[6] !== 1'bx ) && ( quotientFlag_prev[6] !== quotientFlag_expected_prev[6] )
		&& ((quotientFlag_expected_prev[6] !== last_quotientFlag_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotientFlag[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotientFlag_expected_prev);
		$display ("     Real value = %b", quotientFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_quotientFlag_exp[6] = quotientFlag_expected_prev[6];
	end
	if (
		( quotientFlag_expected_prev[7] !== 1'bx ) && ( quotientFlag_prev[7] !== quotientFlag_expected_prev[7] )
		&& ((quotientFlag_expected_prev[7] !== last_quotientFlag_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotientFlag[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotientFlag_expected_prev);
		$display ("     Real value = %b", quotientFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_quotientFlag_exp[7] = quotientFlag_expected_prev[7];
	end
	if (
		( remainderFlag_expected_prev[0] !== 1'bx ) && ( remainderFlag_prev[0] !== remainderFlag_expected_prev[0] )
		&& ((remainderFlag_expected_prev[0] !== last_remainderFlag_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainderFlag[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainderFlag_expected_prev);
		$display ("     Real value = %b", remainderFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_remainderFlag_exp[0] = remainderFlag_expected_prev[0];
	end
	if (
		( remainderFlag_expected_prev[1] !== 1'bx ) && ( remainderFlag_prev[1] !== remainderFlag_expected_prev[1] )
		&& ((remainderFlag_expected_prev[1] !== last_remainderFlag_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainderFlag[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainderFlag_expected_prev);
		$display ("     Real value = %b", remainderFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_remainderFlag_exp[1] = remainderFlag_expected_prev[1];
	end
	if (
		( remainderFlag_expected_prev[2] !== 1'bx ) && ( remainderFlag_prev[2] !== remainderFlag_expected_prev[2] )
		&& ((remainderFlag_expected_prev[2] !== last_remainderFlag_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainderFlag[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainderFlag_expected_prev);
		$display ("     Real value = %b", remainderFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_remainderFlag_exp[2] = remainderFlag_expected_prev[2];
	end
	if (
		( remainderFlag_expected_prev[3] !== 1'bx ) && ( remainderFlag_prev[3] !== remainderFlag_expected_prev[3] )
		&& ((remainderFlag_expected_prev[3] !== last_remainderFlag_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainderFlag[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainderFlag_expected_prev);
		$display ("     Real value = %b", remainderFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_remainderFlag_exp[3] = remainderFlag_expected_prev[3];
	end
	if (
		( remainderFlag_expected_prev[4] !== 1'bx ) && ( remainderFlag_prev[4] !== remainderFlag_expected_prev[4] )
		&& ((remainderFlag_expected_prev[4] !== last_remainderFlag_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainderFlag[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainderFlag_expected_prev);
		$display ("     Real value = %b", remainderFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_remainderFlag_exp[4] = remainderFlag_expected_prev[4];
	end
	if (
		( remainderFlag_expected_prev[5] !== 1'bx ) && ( remainderFlag_prev[5] !== remainderFlag_expected_prev[5] )
		&& ((remainderFlag_expected_prev[5] !== last_remainderFlag_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainderFlag[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainderFlag_expected_prev);
		$display ("     Real value = %b", remainderFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_remainderFlag_exp[5] = remainderFlag_expected_prev[5];
	end
	if (
		( remainderFlag_expected_prev[6] !== 1'bx ) && ( remainderFlag_prev[6] !== remainderFlag_expected_prev[6] )
		&& ((remainderFlag_expected_prev[6] !== last_remainderFlag_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainderFlag[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainderFlag_expected_prev);
		$display ("     Real value = %b", remainderFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_remainderFlag_exp[6] = remainderFlag_expected_prev[6];
	end
	if (
		( remainderFlag_expected_prev[7] !== 1'bx ) && ( remainderFlag_prev[7] !== remainderFlag_expected_prev[7] )
		&& ((remainderFlag_expected_prev[7] !== last_remainderFlag_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainderFlag[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainderFlag_expected_prev);
		$display ("     Real value = %b", remainderFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_remainderFlag_exp[7] = remainderFlag_expected_prev[7];
	end
	if (
		( remainderFlag_expected_prev[8] !== 1'bx ) && ( remainderFlag_prev[8] !== remainderFlag_expected_prev[8] )
		&& ((remainderFlag_expected_prev[8] !== last_remainderFlag_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainderFlag[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainderFlag_expected_prev);
		$display ("     Real value = %b", remainderFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_remainderFlag_exp[8] = remainderFlag_expected_prev[8];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module project2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [8:0] addressA;
reg [8:0] addressB;
reg clk;
reg rst;
// wires                                               
wire finished;
wire [7:0] quotientFlag;
wire [8:0] remainderFlag;

wire sampler;                             

// assign statements (if any)                          
project2 i1 (
// port map - connection between master ports and signals/registers   
	.addressA(addressA),
	.addressB(addressB),
	.clk(clk),
	.finished(finished),
	.quotientFlag(quotientFlag),
	.remainderFlag(remainderFlag),
	.rst(rst)
);
// addressA[ 8 ]
initial
begin
	addressA[8] = 1'b0;
end 
// addressA[ 7 ]
initial
begin
	addressA[7] = 1'b0;
end 
// addressA[ 6 ]
initial
begin
	addressA[6] = 1'b0;
end 
// addressA[ 5 ]
initial
begin
	addressA[5] = 1'b0;
end 
// addressA[ 4 ]
initial
begin
	addressA[4] = 1'b0;
end 
// addressA[ 3 ]
initial
begin
	addressA[3] = 1'b0;
end 
// addressA[ 2 ]
initial
begin
	addressA[2] = 1'b0;
end 
// addressA[ 1 ]
initial
begin
	addressA[1] = 1'b0;
end 
// addressA[ 0 ]
initial
begin
	addressA[0] = 1'b0;
end 
// addressB[ 8 ]
initial
begin
	addressB[8] = 1'b0;
end 
// addressB[ 7 ]
initial
begin
	addressB[7] = 1'b0;
end 
// addressB[ 6 ]
initial
begin
	addressB[6] = 1'b0;
end 
// addressB[ 5 ]
initial
begin
	addressB[5] = 1'b0;
end 
// addressB[ 4 ]
initial
begin
	addressB[4] = 1'b0;
end 
// addressB[ 3 ]
initial
begin
	addressB[3] = 1'b0;
end 
// addressB[ 2 ]
initial
begin
	addressB[2] = 1'b0;
end 
// addressB[ 1 ]
initial
begin
	addressB[1] = 1'b0;
end 
// addressB[ 0 ]
initial
begin
	addressB[0] = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b0;
end 

project2_vlg_sample_tst tb_sample (
	.addressA(addressA),
	.addressB(addressB),
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

project2_vlg_check_tst tb_out(
	.finished(finished),
	.quotientFlag(quotientFlag),
	.remainderFlag(remainderFlag),
	.sampler_rx(sampler)
);
endmodule

